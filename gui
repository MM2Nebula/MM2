-- Merged MM2 Script | Latte Hub + Nebula Hub Features - Obsidian UI Version
local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

-- Enhanced gradient function for Obsidian UI
function gradient(text, startColor, endColor)
    local result = "";
    local length = #text;
    for i = 1, length do
        local t = (i - 1) / math.max(length - 1, 1);
        local r = math.floor((startColor.R + ((endColor.R - startColor.R) * t)) * 255);
        local g = math.floor((startColor.G + ((endColor.G - startColor.G) * t)) * 255);
        local b = math.floor((startColor.B + ((endColor.B - startColor.B) * t)) * 255);
        local char = text:sub(i, i);
        result = result .. '<font color="rgb(' .. r .. ", " .. g .. ", " .. b .. ')">' .. char .. "</font>";
    end
    return result;
end

-- Initial popup
local Confirmed = false
Library:Notify({
    Title = "Latte MM2 Hub",
    Description = "Enhanced MM2 Script with Latte Scripts!\nhttps://discord.gg/pU8r42d6hd",
    Time = 5
})

-- Create main window
local Window = Library:CreateWindow({
    Title = "Latte MM2 Hub",
    Footer = "Enhanced MM2 Script | Latte Scripts",
    Icon = 95816097006870,
    NotifySide = "Right",
    ShowCustomCursor = true,
    Resizable = true,
    Center = false,
    AutoShow = true,
})

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local CurrentCamera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer
local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- ESP System Variables
local murderHasKnife = false
local sheriffHasGun = false
local currentESPOptions = { "Esp All" }
local highlightEnabled = true
local lineESPEnabled = false
local coinESPEnabled = false
local tracers = {}

-- Anti-Stealer Variables
local antiStealerEnabled = false
local tradeScamProtectionEnabled = false

-- Weapon Dupe Variables
local WeaponName = ""
local FunctionCall = 1

-- Visual Weapon Variables
local fromWeapon = ""
local toWeapon = ""

-- UI Path for dupe functions
local UIPath
if LocalPlayer.PlayerGui.MainGUI.Game:FindFirstChild("Inventory") ~= nil then
    UIPath = LocalPlayer.PlayerGui.MainGUI.Game.Inventory.Main
else
    UIPath = LocalPlayer.PlayerGui.MainGUI.Lobby.Screens.Inventory.Main
end

-- Character Settings
local CharacterSettings = {
    WalkSpeed = {
        Value = 16,
        Default = 16,
        Locked = false
    },
    JumpPower = {
        Value = 50,
        Default = 50,
        Locked = false
    }
};

-- Advanced Features Variables
local advancedESPEnabled = false
local rainbowESPEnabled = false
local distanceESPEnabled = false
local healthESPEnabled = false
local flyEnabled = false
local flySpeed = 50
local noclipEnabled = false
local autoFarmEnabled = false
local autoCollectCoins = false
local autoCollectGuns = false
local autoCollectKnives = false
local rainbowCharacter = false
local screenShake = false
local particleEffects = false
local currentGravity = 196.2

-- ESP Functions
local function getRole(player)
    local character = player.Character
    if not character then return nil end
    local backpack = player:FindFirstChild("Backpack")
    if character:FindFirstChild("Knife") or (backpack and backpack:FindFirstChild("Knife")) then return "Murderer" end
    if character:FindFirstChild("Gun") or (backpack and backpack:FindFirstChild("Gun")) then return "Sheriff" end
    return "Innocent"
end

local function isPlayerTargeted(player, selectedOptions)
    local role = getRole(player)
    if not role then return false end
    if table.find(selectedOptions, "Esp All") then return true end
    if table.find(selectedOptions, "Esp Murder") and role == "Murderer" then return true end
    if table.find(selectedOptions, "Esp Sheriff") and role == "Sheriff" then return true end
    if table.find(selectedOptions, "Esp Sheriff / Murder") and (role == "Sheriff" or role == "Murderer") then return true end
    return false
end

local function createHighlight(character, color)
    local highlight = character:FindFirstChild("RoleHighlight")
    if not highlight then
        highlight = Instance.new("Highlight")
        highlight.Name = "RoleHighlight"
        highlight.FillTransparency = 0.5
        highlight.OutlineTransparency = 1
        highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        highlight.Adornee = character
        highlight.Parent = character
    end
    highlight.FillColor = color
end

local function removeHighlight(character)
    local highlight = character:FindFirstChild("RoleHighlight")
    if highlight then highlight:Destroy() end
end

local function createTracer(player, color)
    local line = Drawing.new("Line")
    line.Thickness = 2
    line.Color = color or Color3.new(1, 1, 1)
    line.Transparency = 1
    tracers[player] = line
end

local function removeTracer(player)
    if tracers[player] then
        tracers[player]:Remove()
        tracers[player] = nil
    end
end

local function updateESP()
    murderHasKnife = false
    sheriffHasGun = false

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local role = getRole(player)
            if role == "Murderer" then murderHasKnife = true end
            if role == "Sheriff" then sheriffHasGun = true end
        end
    end

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local role = getRole(player)
            local target = isPlayerTargeted(player, currentESPOptions)

            if highlightEnabled then
                if target then
                    local color = role == "Murderer" and Color3.new(1, 0, 0) or 
                                 role == "Sheriff" and Color3.new(0, 0, 1) or 
                                 Color3.new(0, 1, 0)
                    createHighlight(player.Character, color)
                else
                    removeHighlight(player.Character)
                end
            else
                removeHighlight(player.Character)
            end

            if lineESPEnabled and target then
                local color = role == "Murderer" and Color3.new(1, 0, 0) or 
                             role == "Sheriff" and Color3.new(0, 0, 1) or 
                             Color3.new(0, 1, 0)
                if not tracers[player] then 
                    createTracer(player, color) 
                else
                    tracers[player].Color = color
                end
            else
                removeTracer(player)
            end
        end
    end
end

-- Character Functions
local function updateCharacter()
    local character = LocalPlayer.Character;
    local humanoid = character:FindFirstChildOfClass("Humanoid");
    if humanoid then
        if not CharacterSettings.WalkSpeed.Locked then
            humanoid.WalkSpeed = CharacterSettings.WalkSpeed.Value;
        end
        if not CharacterSettings.JumpPower.Locked then
            humanoid.JumpPower = CharacterSettings.JumpPower.Value;
        end
    end
end

-- Weapon Dupe Functions
local function VisualDupe()
    wait(math.random(1, 3))
    for i,v in pairs(UIPath.Weapons.Items.Container:GetChildren()) do
        for i,v in pairs(v.Container:GetChildren()) do
            if v.Name == "Christmas" or v.Name == "Halloween" then
                for i,v in pairs(v.Container:GetChildren()) do
                    if v:IsA("Frame") and v.ItemName.Label.Text == WeaponName then
                        local amount = v.Container.Amount.Text
                        if amount == "" or amount == "None" then
                            v.Container.Amount.Text = "x2"
                        else
                            local num = tonumber(amount:match("x(%d+)"))
                            if num then
                                v.Container.Amount.Text = "x" .. tostring(num + 1)
                            end
                        end
                    end
                end
            else
                if v:IsA("Frame") and v.ItemName.Label.Text == WeaponName then
                    local amount = v.Container.Amount.Text
                    if amount == "" or amount == "None" then
                        v.Container.Amount.Text = "x2"
                    else
                        local num = tonumber(amount:match("x(%d+)"))
                        if num then
                            v.Container.Amount.Text = "x" .. tostring(num + 1)
                        end
                    end
                end
            end
        end
    end
end

local function InventoryDupe()
    wait(math.random(3, 5))
    for i,v in pairs(UIPath.Weapons.Items.Container:GetChildren()) do
        for i,v in pairs(v.Container:GetChildren()) do
            if v.Name == "Christmas" or v.Name == "Halloween" then
                for i,v in pairs(v.Container:GetChildren()) do
                    if v:IsA("Frame") then
                        if v.ItemName.Label.Text ~= "Default Knife" and v.ItemName.Label.Text ~= "Default Gun" then
                            local amount = v.Container.Amount.Text
                            if amount == "" or amount == "None" then
                                v.Container.Amount.Text = "x2"
                            else
                                local num = tonumber(amount:match("x(%d+)"))
                                if num then
                                    v.Container.Amount.Text = "x" .. tostring(num * 2)
                                end
                            end
                        end
                    end
                end
            else
                if v:IsA("Frame") then
                    if v.ItemName.Label.Text ~= "Default Knife" and v.ItemName.Label.Text ~= "Default Gun" then
                        local amount = v.Container.Amount.Text
                        if amount == "" or amount == "None" then
                            v.Container.Amount.Text = "x2"
                        else
                            local num = tonumber(amount:match("x(%d+)"))
                            if num then
                                v.Container.Amount.Text = "x" .. tostring(num * 2)
                            end
                        end
                    end
                end
            end
        end
    end
    for i,v in pairs(UIPath.Pets.Items.Container.Current.Container:GetChildren()) do
        if v:IsA("Frame") then
            local amount = v.Container.Amount.Text
            if amount == "" or amount == "None" then
                v.Container.Amount.Text = "x2"
            else
                local num = tonumber(amount:match("x(%d+)"))
                if num then
                    v.Container.Amount.Text = "x" .. tostring(num * 2)
                end
            end
        end
    end
end

-- Visual Weapon Functions
local function NameMatch(name, search)
    local sanitizedName = name:gsub("_G_%d%d%d%d", ""):gsub("_K_%d%d%d%d", ""):lower()
    local sanitizedSearch = search:lower()
    return sanitizedName:find(sanitizedSearch, 1, true) ~= nil
end

-- Trade Scam Functions
local function StartVisualTrade()
    if game:GetService("Players").LocalPlayer.PlayerGui.TradeGUI.Enabled == true or game:GetService("Players").LocalPlayer.PlayerGui.TradeGUI_Phone.Enabled == true then
        wait(1)
        Library:Notify({
            Title = "Trade Scam Active",
            Description = "Items In Trade Are Now Visual, Remove All Items!",
            Time = 5
        })
    else
        Library:Notify({
            Title = "Trade Scam Error",
            Description = "You Need To Be In Trade For This To Work!",
            Time = 5
        })
    end
end

-- Weapon Spawner Functions
local function getrandombox()
    local success, boxes = pcall(function()
        return require(game:GetService("ReplicatedStorage").Database.Sync.MysteryBox)
    end)
    
    if not success or not boxes or next(boxes) == nil then 
        return "StandardBox"
    end
    
    local keys = {}
    for k, _ in pairs(boxes) do
        table.insert(keys, k)
    end
    return keys[math.random(1, #keys)]
end

local function opencrate(ITEM_NAME)
    local success = pcall(function()
        local boxmodule = require(game:GetService("ReplicatedStorage").Modules.BoxModule)
        local itemdatabase = require(game:GetService("ReplicatedStorage").Database.Sync.Item)
        
        if ITEM_NAME and itemdatabase[ITEM_NAME] then
            print("Spawning:", ITEM_NAME)
            boxmodule.OpenBox(getrandombox(), ITEM_NAME)
            
            local success2 = pcall(function()
                local poop = getsenv(game:GetService("Players").LocalPlayer.PlayerGui.MainGUI.Inventory.NewItem)._G
                poop.NewItem(ITEM_NAME, nil, nil, "Weapons", 1)
            end)
            
            Library:Notify({
                Title = "Success",
                Description = "Successfully spawned: " .. ITEM_NAME,
                Time = 3
            })
        else
            Library:Notify({
                Title = "Error",
                Description = "Invalid item: " .. ITEM_NAME,
                Time = 3
            })
        end
    end)
    
    if not success then
        Library:Notify({
            Title = "Error",
            Description = "Error opening crate for: " .. ITEM_NAME,
            Time = 3
        })
    end
end

-- Create tabs
local Tabs = {
    Main = Window:AddTab("Main", "user"),
    ESP = Window:AddTab("ESP", "eye"),
    Character = Window:AddTab("Character", "file-cog"),
    Teleport = Window:AddTab("Teleport", "user"),
    WeaponSpawner = Window:AddTab("Weapon Spawner", "sword"),
    WeaponDupe = Window:AddTab("Weapon Dupe", "copy"),
    Visual = Window:AddTab("Visual", "eye-off"),
    TradeScam = Window:AddTab("Trade-Scam", "shield-alert"),
    AntiStealer = Window:AddTab("Anti Stealer", "shield"),
    Lagger = Window:AddTab("Server Lagger", "zap"),
    AntiAFK = Window:AddTab("Anti AFK", "moon"),
    Advanced = Window:AddTab("Advanced", "zap"),
    AutoFarm = Window:AddTab("Auto Farm", "trending-up"),
    Fun = Window:AddTab("Fun", "smile"),
    Innocent = Window:AddTab("Innocent", "circle"),
    Murder = Window:AddTab("Murder", "circle"),
    Sheriff = Window:AddTab("Sheriff", "circle"),
    Info = Window:AddTab("Information", "info"),
    Socials = Window:AddTab("Socials", "star"),
    ["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}

-- Main Tab Content
local MainGroup = Tabs.Main:AddLeftGroupbox("Main Features", "boxes")
MainGroup:AddLabel("Welcome to Latte MM2 Hub!")
MainGroup:AddLabel("Enhanced MM2 Script with all features", true)
MainGroup:AddButton({
    Text = "Copy Discord",
    Func = function()
        setclipboard("https://discord.gg/pU8r42d6hd")
        Library:Notify({
            Title = "Discord Copied!",
            Description = "Discord invite copied to clipboard!",
            Time = 3
        })
    end
})

-- ESP Tab Content
local ESPGroup = Tabs.ESP:AddLeftGroupbox("Player ESP", "eye")
ESPGroup:AddDropdown("ESPOptions", {
    Values = { "Esp All", "Esp Sheriff", "Esp Murder", "Esp Sheriff / Murder" },
    Default = "Esp All",
    Multi = true,
    Text = "ESP Options",
    Tooltip = "Select which players to highlight",
    Callback = function(Value)
        currentESPOptions = Value
        updateESP()
    end
})

ESPGroup:AddToggle("HighlightESP", {
    Text = "Highlight ESP",
    Default = true,
    Tooltip = "Enable/disable player highlighting",
    Callback = function(Value)
        highlightEnabled = Value
        updateESP()
    end
})

ESPGroup:AddToggle("LineESP", {
    Text = "Line ESP",
    Default = false,
    Tooltip = "Draw lines to players",
    Callback = function(Value)
        lineESPEnabled = Value
        if not Value then
            for _, line in pairs(tracers) do line:Remove() end
            tracers = {}
        end
        updateESP()
    end
})

-- Character Tab Content
local CharacterGroup = Tabs.Character:AddLeftGroupbox("Character Settings", "file-cog")
CharacterGroup:AddSlider("WalkSpeed", {
    Text = "Walk Speed",
    Default = 16,
    Min = 0,
    Max = 200,
    Rounding = 0,
    Suffix = " studs/s",
    Tooltip = "Set your character's walk speed",
    Callback = function(Value)
        CharacterSettings.WalkSpeed.Value = Value
        updateCharacter()
    end
})

CharacterGroup:AddButton({
    Text = "Reset Walk Speed",
    Func = function()
        CharacterSettings.WalkSpeed.Value = CharacterSettings.WalkSpeed.Default
        updateCharacter()
        Library:Notify({
            Title = "Walk Speed Reset",
            Description = "Walk speed reset to default",
            Time = 2
        })
    end
})

CharacterGroup:AddToggle("BlockWalkSpeed", {
    Text = "Block Walk Speed",
    Default = false,
    Tooltip = "Prevent walk speed from being changed",
    Callback = function(Value)
        CharacterSettings.WalkSpeed.Locked = Value
        updateCharacter()
    end
})

CharacterGroup:AddSlider("JumpPower", {
    Text = "Jump Power",
    Default = 50,
    Min = 0,
    Max = 200,
    Rounding = 0,
    Suffix = " power",
    Tooltip = "Set your character's jump power",
    Callback = function(Value)
        CharacterSettings.JumpPower.Value = Value
        updateCharacter()
    end
})

CharacterGroup:AddButton({
    Text = "Reset Jump Power",
    Func = function()
        CharacterSettings.JumpPower.Value = CharacterSettings.JumpPower.Default
        updateCharacter()
        Library:Notify({
            Title = "Jump Power Reset",
            Description = "Jump power reset to default",
            Time = 2
        })
    end
})

CharacterGroup:AddToggle("BlockJumpPower", {
    Text = "Block Jump Power",
    Default = false,
    Tooltip = "Prevent jump power from being changed",
    Callback = function(Value)
        CharacterSettings.JumpPower.Locked = Value
        updateCharacter()
    end
})

-- Teleport Tab Content
local TeleportGroup = Tabs.Teleport:AddLeftGroupbox("Teleport System", "user")
local teleportTarget = nil

local function updateTeleportPlayers()
    local playersList = {"Select Player"}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(playersList, player.Name)
        end
    end
    return playersList
end

TeleportGroup:AddDropdown("TeleportPlayers", {
    Values = updateTeleportPlayers(),
    Default = "Select Player",
    Text = "Players",
    Tooltip = "Select a player to teleport to",
    Callback = function(Value)
        if Value ~= "Select Player" then
            teleportTarget = Players:FindFirstChild(Value)
        else
            teleportTarget = nil
        end
    end
})

TeleportGroup:AddButton({
    Text = "Teleport to Player",
    Func = function()
        if teleportTarget and teleportTarget.Character then
            local targetRoot = teleportTarget.Character:FindFirstChild("HumanoidRootPart")
            local localRoot = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if targetRoot and localRoot then
                localRoot.CFrame = targetRoot.CFrame
                Library:Notify({
                    Title = "Teleport",
                    Description = "Successfully teleported to " .. teleportTarget.Name,
                    Time = 3
                })
            end
        else
            Library:Notify({
                Title = "Error",
                Description = "Target not found or unavailable",
                Time = 3
            })
        end
    end
})

TeleportGroup:AddButton({
    Text = "Update Players List",
    Func = function()
        Options.TeleportPlayers:SetValues(updateTeleportPlayers())
    end
})

-- Weapon Spawner Tab Content
local WeaponSpawnerGroup = Tabs.WeaponSpawner:AddLeftGroupbox("Weapon Spawner", "sword")
local weaponName = ""
local selectedCrate = "Christmas2024Box"

WeaponSpawnerGroup:AddInput("WeaponName", {
    Text = "Weapon Name",
    Default = "",
    Placeholder = "Enter weapon name (e.g., CandyBlade)",
    Tooltip = "Enter the name of the weapon to spawn",
    Callback = function(Value)
        weaponName = Value
    end
})

WeaponSpawnerGroup:AddDropdown("CrateType", {
    Values = {"Christmas2024Box", "StandardBox", "MysteryBox", "PremiumBox"},
    Default = "Christmas2024Box",
    Text = "Select Crate",
    Tooltip = "Choose the crate type to open",
    Callback = function(Value)
        selectedCrate = Value
    end
})

WeaponSpawnerGroup:AddButton({
    Text = "Spawn Weapon",
    Func = function()
        if weaponName ~= "" then
            opencrate(weaponName)
        else
            Library:Notify({
                Title = "Error",
                Description = "Please enter a weapon name.",
                Time = 3
            })
        end
    end
})

-- Weapon Dupe Tab Content
local WeaponDupeGroup = Tabs.WeaponDupe:AddLeftGroupbox("Weapon Duplication", "copy")

WeaponDupeGroup:AddInput("DupeWeaponName", {
    Text = "Weapon Name",
    Default = "",
    Placeholder = "Enter weapon name (e.g., Lightbringer)",
    Tooltip = "Enter the name of the weapon to duplicate",
    Callback = function(Value)
        WeaponName = Value
        Library:Notify({
            Title = "Weapon Dupe",
            Description = "Selected Weapon: " .. tostring(WeaponName),
            Time = 3
        })
    end
})

WeaponDupeGroup:AddInput("DupeAmount", {
    Text = "Dupe Amount",
    Default = "1",
    Placeholder = "Enter amount (e.g., 5)",
    Tooltip = "Enter how many times to duplicate",
    Callback = function(Value)
        FunctionCall = tonumber(Value) or 1
        Library:Notify({
            Title = "Weapon Dupe",
            Description = "Selected Amount: " .. tostring(FunctionCall),
            Time = 3
        })
    end
})

WeaponDupeGroup:AddButton({
    Text = "Start Duplication Process",
    Func = function()
        if WeaponName == "" then
            Library:Notify({
                Title = "Weapon Dupe Error",
                Description = "Please enter a weapon name first!",
                Time = 5
            })
            return
        end
        
        Library:Notify({
            Title = "Weapon Dupe",
            Description = "Started Duplication For: " .. tostring(WeaponName) .. ", " .. tostring(FunctionCall) .. " times.",
            Time = 5
        })
        
        for i = 1, FunctionCall do
            VisualDupe()
        end
        
        Library:Notify({
            Title = "Weapon Dupe Complete",
            Description = "Successfully duplicated " .. tostring(WeaponName) .. " " .. tostring(FunctionCall) .. " times.",
            Time = 5
        })
    end
})

local InventoryDupeGroup = Tabs.WeaponDupe:AddRightGroupbox("Inventory Duplication", "copy")
InventoryDupeGroup:AddButton({
    Text = "Start Inventory Dupe Process",
    Func = function()
        Library:Notify({
            Title = "Inventory Dupe",
            Description = "Attempting To Duplicate Whole Weapon Inventory.",
            Time = 5
        })
        
        InventoryDupe()
        
        Library:Notify({
            Title = "Inventory Dupe Complete",
            Description = "Successfully Duplicated Whole Weapon Inventory, Enjoy!",
            Time = 5
        })
    end
})

-- Visual Tab Content
local VisualGroup = Tabs.Visual:AddLeftGroupbox("Visual Weapons", "eye-off")

VisualGroup:AddInput("FromWeapon", {
    Text = "Weapon To Replace",
    Default = "",
    Placeholder = "Enter weapon name to replace (e.g., Blossom)",
    Tooltip = "Enter the weapon you want to replace",
    Callback = function(Value)
        fromWeapon = Value
        Library:Notify({
            Title = "Visual Weapons",
            Description = "Weapon To Replace: " .. Value,
            Time = 3
        })
    end
})

VisualGroup:AddInput("ToWeapon", {
    Text = "Weapon To Receive",
    Default = "",
    Placeholder = "Enter weapon name to receive",
    Tooltip = "Enter the weapon you want to receive",
    Callback = function(Value)
        toWeapon = Value
        Library:Notify({
            Title = "Visual Weapons",
            Description = "Weapon To Receive: " .. Value,
            Time = 3
        })
    end
})

VisualGroup:AddButton({
    Text = "Change Weapon Visual",
    Func = function()
        if fromWeapon == "" or toWeapon == "" then
            Library:Notify({
                Title = "Visual Weapons Error",
                Description = "Please enter both weapon names!",
                Time = 5
            })
            return
        end
        
        local success = pcall(function()
            local Weapons = require(game:GetService("ReplicatedStorage").Database.Sync.Item)
            local foundFromWeapons = {}
            local foundToWeapons = {}
            
            for WeaponName, _ in pairs(Weapons) do
                if NameMatch(WeaponName, fromWeapon) then
                    table.insert(foundFromWeapons, WeaponName)
                end
                if NameMatch(WeaponName, toWeapon) then
                    table.insert(foundToWeapons, WeaponName)
                end
            end
            
            if #foundFromWeapons > 0 and #foundToWeapons > 0 then
                for _, foundFromWeapon in ipairs(foundFromWeapons) do
                    for _, foundToWeapon in ipairs(foundToWeapons) do
                        Weapons[foundFromWeapon] = {}
                        for i, v in pairs(Weapons[foundToWeapon]) do
                            Weapons[foundFromWeapon][i] = v
                        end
                        game:GetService("ReplicatedStorage").Remotes.Inventory.Equip:FireServer(foundToWeapon)
                    end
                end
                Library:Notify({
                    Title = "Visual Weapons Success",
                    Description = "Successfully changed weapon visual!",
                    Time = 5
                })
            else
                Library:Notify({
                    Title = "Visual Weapons Error",
                    Description = "Weapon NOT FOUND",
                    Time = 5
                })
            end
        end)
        
        if not success then
            Library:Notify({
                Title = "Visual Weapons Error",
                Description = "Failed to change weapon visual",
                Time = 5
            })
        end
    end
})

-- Trade Scam Tab Content
local TradeScamGroup = Tabs.TradeScam:AddLeftGroupbox("Trade-Scam", "shield-alert")
local visualTradeEnabled = false

TradeScamGroup:AddToggle("VisualTrade", {
    Text = "Toggle Visual Trade",
    Default = false,
    Tooltip = "Enable/disable visual trade mode",
    Callback = function(Value)
        visualTradeEnabled = Value
        Library:Notify({
            Title = "Visual Trade",
            Description = visualTradeEnabled and "Visual Trade Enabled" or "Visual Trade Disabled",
            Time = 3
        })
    end
})

TradeScamGroup:AddButton({
    Text = "Start Visual Trade",
    Func = function()
        if not visualTradeEnabled then
            Library:Notify({
                Title = "Visual Trade Error",
                Description = "Please enable Visual Trade first!",
                Time = 5
            })
            return
        end
        
        StartVisualTrade()
    end
})

-- Anti Stealer Tab Content
local AntiStealerGroup = Tabs.AntiStealer:AddLeftGroupbox("Script Protection", "shield")

AntiStealerGroup:AddToggle("AntiStealer", {
    Text = "Enable Anti Stealer",
    Default = false,
    Tooltip = "Enable anti-stealer protection",
    Callback = function(Value)
        antiStealerEnabled = Value
        if Value then
            Library:Notify({
                Title = "Anti Stealer Enabled",
                Description = "Script protection is now active!",
                Time = 5
            })
        else
            Library:Notify({
                Title = "Anti Stealer Disabled",
                Description = "Script protection has been turned off.",
                Time = 3
            })
        end
    end
})

AntiStealerGroup:AddToggle("TradeScamProtection", {
    Text = "Trade Scam Protection",
    Default = false,
    Tooltip = "Protect against trade scams",
    Callback = function(Value)
        tradeScamProtectionEnabled = Value
        if Value then
            Library:Notify({
                Title = "Trade Scam Protection Enabled",
                Description = "You are now protected against trade scams!",
                Time = 5
            })
        else
            Library:Notify({
                Title = "Trade Scam Protection Disabled",
                Description = "Trade scam protection has been turned off.",
                Time = 3
            })
        end
    end
})

-- Server Lagger Tab Content
local LaggerGroup = Tabs.Lagger:AddLeftGroupbox("Server Lagger", "zap")

LaggerGroup:AddButton({
    Text = "Start Server Lag",
    Func = function()
        Library:Notify({
            Title = "Server Lagger",
            Description = "Server Is Now In Lagging, There Is A Chance To Be Disconnected!",
            Time = 5
        })
        
        local success = pcall(function()
            local e = game:GetService("ReplicatedStorage").GetSyncData
            local InvokeServer = e.InvokeServer
            local spawn = task.spawn
            local a = 0;
            while 1 do
                for i=1, 1 do
                    spawn(InvokeServer, e)
                end
                a = a + 1
                if a == 3 then
                    a = 0
                    wait(0)
                end
            end
        end)
        
        if not success then
            Library:Notify({
                Title = "Server Lagger Error",
                Description = "Failed to start server lag!",
                Time = 5
            })
        end
    end
})

-- Anti AFK Tab Content
local AntiAFKGroup = Tabs.AntiAFK:AddLeftGroupbox("Anti AFK Protection", "moon")

AntiAFKGroup:AddButton({
    Text = "Enable Anti AFK",
    Func = function()
        local success = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/hassanxzayn-lua/Anti-afk/main/antiafkbyhassanxzyn"))()
        end)
        
        if success then
            Library:Notify({
                Title = "Anti AFK",
                Description = "Anti AFK script executed successfully!",
                Time = 3
            })
        else
            Library:Notify({
                Title = "Anti AFK Error",
                Description = "Failed to load Anti AFK script!",
                Time = 5
            })
        end
    end
})

AntiAFKGroup:AddLabel("About Anti AFK", true)
AntiAFKGroup:AddLabel("This feature prevents you from being kicked for inactivity. Click the button above to activate anti-AFK protection.", true)

-- Advanced Tab Content
local AdvancedESPGroup = Tabs.Advanced:AddLeftGroupbox("Advanced ESP Features", "zap")

AdvancedESPGroup:AddToggle("AdvancedESP", {
    Text = "Advanced ESP",
    Default = false,
    Tooltip = "Enable advanced ESP features",
    Callback = function(Value)
        advancedESPEnabled = Value
        Library:Notify({
            Title = "Advanced ESP",
            Description = advancedESPEnabled and "Advanced ESP Enabled" or "Advanced ESP Disabled",
            Time = 3
        })
    end
})

AdvancedESPGroup:AddToggle("RainbowESP", {
    Text = "Rainbow ESP",
    Default = false,
    Tooltip = "Make ESP colors cycle through rainbow",
    Callback = function(Value)
        rainbowESPEnabled = Value
        Library:Notify({
            Title = "Rainbow ESP",
            Description = rainbowESPEnabled and "Rainbow ESP Enabled" or "Rainbow ESP Disabled",
            Time = 3
        })
    end
})

AdvancedESPGroup:AddToggle("DistanceESP", {
    Text = "Distance ESP",
    Default = false,
    Tooltip = "Show distance to players",
    Callback = function(Value)
        distanceESPEnabled = Value
        Library:Notify({
            Title = "Distance ESP",
            Description = distanceESPEnabled and "Distance ESP Enabled" or "Distance ESP Disabled",
            Time = 3
        })
    end
})

AdvancedESPGroup:AddToggle("HealthESP", {
    Text = "Health ESP",
    Default = false,
    Tooltip = "Show player health above their heads",
    Callback = function(Value)
        healthESPEnabled = Value
        Library:Notify({
            Title = "Health ESP",
            Description = healthESPEnabled and "Health ESP Enabled" or "Health ESP Disabled",
            Time = 3
        })
    end
})

local AdvancedMovementGroup = Tabs.Advanced:AddRightGroupbox("Advanced Movement", "zap")

AdvancedMovementGroup:AddToggle("FlyMode", {
    Text = "Fly Mode",
    Default = false,
    Tooltip = "Enable fly mode (WASD + Space/Shift)",
    Callback = function(Value)
        flyEnabled = Value
        if Value then
            Library:Notify({
                Title = "Fly Mode",
                Description = "Fly mode enabled! Use WASD to move.",
                Time = 3
            })
        else
            Library:Notify({
                Title = "Fly Mode",
                Description = "Fly mode disabled.",
                Time = 3
            })
        end
    end
})

AdvancedMovementGroup:AddSlider("FlySpeed", {
    Text = "Fly Speed",
    Default = 50,
    Min = 10,
    Max = 200,
    Rounding = 0,
    Suffix = " speed",
    Tooltip = "Set fly speed",
    Callback = function(Value)
        flySpeed = Value
        Library:Notify({
            Title = "Fly Speed",
            Description = "Fly speed set to " .. Value,
            Time = 2
        })
    end
})

AdvancedMovementGroup:AddToggle("Noclip", {
    Text = "Noclip",
    Default = false,
    Tooltip = "Walk through walls",
    Callback = function(Value)
        noclipEnabled = Value
        Library:Notify({
            Title = "Noclip",
            Description = noclipEnabled and "Noclip enabled!" or "Noclip disabled.",
            Time = 3
        })
    end
})

-- Auto Farm Tab Content
local AutoFarmGroup = Tabs.AutoFarm:AddLeftGroupbox("Auto Farming System", "trending-up")

AutoFarmGroup:AddToggle("AutoFarm", {
    Text = "Auto Farm",
    Default = false,
    Tooltip = "Enable auto farming",
    Callback = function(Value)
        autoFarmEnabled = Value
        Library:Notify({
            Title = "Auto Farm",
            Description = autoFarmEnabled and "Auto farming started!" or "Auto farming stopped.",
            Time = 3
        })
    end
})

AutoFarmGroup:AddToggle("AutoCollectCoins", {
    Text = "Auto Collect Coins",
    Default = false,
    Tooltip = "Automatically collect nearby coins",
    Callback = function(Value)
        autoCollectCoins = Value
        Library:Notify({
            Title = "Auto Collect",
            Description = autoCollectCoins and "Auto collecting coins!" or "Stopped collecting coins.",
            Time = 3
        })
    end
})

AutoFarmGroup:AddToggle("AutoCollectGuns", {
    Text = "Auto Collect Guns",
    Default = false,
    Tooltip = "Automatically collect dropped guns",
    Callback = function(Value)
        autoCollectGuns = Value
        Library:Notify({
            Title = "Auto Collect",
            Description = autoCollectGuns and "Auto collecting guns!" or "Stopped collecting guns.",
            Time = 3
        })
    end
})

AutoFarmGroup:AddToggle("AutoCollectKnives", {
    Text = "Auto Collect Knives",
    Default = false,
    Tooltip = "Automatically collect dropped knives",
    Callback = function(Value)
        autoCollectKnives = Value
        Library:Notify({
            Title = "Auto Collect",
            Description = autoCollectKnives and "Auto collecting knives!" or "Stopped collecting knives.",
            Time = 3
        })
    end
})

-- Fun Tab Content
local FunGroup = Tabs.Fun:AddLeftGroupbox("Fun Features", "smile")

FunGroup:AddToggle("RainbowCharacter", {
    Text = "Rainbow Character",
    Default = false,
    Tooltip = "Make your character cycle through rainbow colors",
    Callback = function(Value)
        rainbowCharacter = Value
        Library:Notify({
            Title = "Rainbow Character",
            Description = rainbowCharacter and "Rainbow character enabled!" or "Rainbow character disabled.",
            Time = 3
        })
    end
})

FunGroup:AddSlider("CharacterSize", {
    Text = "Character Size",
    Default = 1,
    Min = 0.1,
    Max = 5,
    Rounding = 1,
    Suffix = "x",
    Tooltip = "Change your character's size",
    Callback = function(Value)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.HipHeight = Value
            LocalPlayer.Character.Humanoid.WalkSpeed = 16 * Value
            Library:Notify({
                Title = "Size Changer",
                Description = "Character size set to " .. Value,
                Time = 3
            })
        end
    end
})

FunGroup:AddSlider("Gravity", {
    Text = "Gravity",
    Default = 196,
    Min = 0,
    Max = 500,
    Rounding = 0,
    Suffix = " gravity",
    Tooltip = "Change world gravity",
    Callback = function(Value)
        currentGravity = Value
        workspace.Gravity = Value
        Library:Notify({
            Title = "Gravity Changer",
            Description = "Gravity set to " .. Value,
            Time = 3
        })
    end
})

FunGroup:AddButton({
    Text = "Reset Gravity",
    Func = function()
        workspace.Gravity = 196.2
        Library:Notify({
            Title = "Gravity Reset",
            Description = "Gravity reset to normal!",
            Time = 3
        })
    end
})

local VisualEffectsGroup = Tabs.Fun:AddRightGroupbox("Visual Effects", "smile")

VisualEffectsGroup:AddToggle("ScreenShake", {
    Text = "Screen Shake",
    Default = false,
    Tooltip = "Add screen shake effects",
    Callback = function(Value)
        screenShake = Value
        Library:Notify({
            Title = "Screen Shake",
            Description = screenShake and "Screen shake enabled!" or "Screen shake disabled.",
            Time = 3
        })
    end
})

VisualEffectsGroup:AddToggle("ParticleEffects", {
    Text = "Particle Effects",
    Default = false,
    Tooltip = "Enable particle effects",
    Callback = function(Value)
        particleEffects = Value
        Library:Notify({
            Title = "Particle Effects",
            Description = particleEffects and "Particle effects enabled!" or "Particle effects disabled.",
            Time = 3
        })
    end
})

VisualEffectsGroup:AddButton({
    Text = "Explode Everyone",
    Func = function()
        Library:Notify({
            Title = "Explosion",
            Description = "Creating explosions around all players!",
            Time = 3
        })
        
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local explosion = Instance.new("Explosion")
                explosion.Position = player.Character.HumanoidRootPart.Position
                explosion.BlastRadius = 50
                explosion.BlastPressure = 1000000
                explosion.Parent = workspace
            end
        end
    end
})

-- Innocent Tab Content (Gun System)
local GunSystem = {
    AutoGrabEnabled = false,
    NotifyGunDrop = true,
    GunDropCheckInterval = 1,
    ActiveGunDrops = {},
    GunDropHighlights = {}
}

local mapPaths = {
    "ResearchFacility", "Hospital3", "MilBase", "House2", "Workplace",
    "Mansion2", "BioLab", "Hotel", "Factory", "Bank2", "PoliceStation"
}

local function ScanForGunDrops()
    GunSystem.ActiveGunDrops = {};
    for _, mapName in ipairs(mapPaths) do
        local map = workspace:FindFirstChild(mapName);
        if map then
            local gunDrop = map:FindFirstChild("GunDrop");
            if gunDrop then
                table.insert(GunSystem.ActiveGunDrops, gunDrop);
            end
        end
    end
    local rootGunDrop = workspace:FindFirstChild("GunDrop");
    if rootGunDrop then
        table.insert(GunSystem.ActiveGunDrops, rootGunDrop);
    end
end

local function GrabGun(gunDrop)
    if not gunDrop then
        ScanForGunDrops();
        if #GunSystem.ActiveGunDrops == 0 then
            Library:Notify({
                Title = "Gun System",
                Description = "No guns available on the map",
                Time = 3
            });
            return false;
        end
        local nearestGun = nil;
        local minDistance = math.huge;
        local character = LocalPlayer.Character;
        local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart");
        if humanoidRootPart then
            for _, drop in ipairs(GunSystem.ActiveGunDrops) do
                local distance = (humanoidRootPart.Position - drop.Position).Magnitude;
                if distance < minDistance then
                    nearestGun = drop;
                    minDistance = distance;
                end
            end
        end
        gunDrop = nearestGun;
    end
    if (gunDrop and LocalPlayer.Character) then
        local humanoidRootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart");
        if humanoidRootPart then
            humanoidRootPart.CFrame = gunDrop.CFrame;
            task.wait(0.3);
            local prompt = gunDrop:FindFirstChildOfClass("ProximityPrompt");
            if prompt then
                fireproximityprompt(prompt);
                Library:Notify({
                    Title = "Gun System",
                    Description = "Successfully grabbed the gun!",
                    Time = 3
                });
                return true;
            end
        end
    end
    return false;
end

local function AutoGrabGun()
    while GunSystem.AutoGrabEnabled do
        ScanForGunDrops();
        if #GunSystem.ActiveGunDrops > 0 and LocalPlayer.Character then
            local humanoidRootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart");
            if humanoidRootPart then
                local nearestGun = nil;
                local minDistance = math.huge;
                for _, gunDrop in ipairs(GunSystem.ActiveGunDrops) do
                    local distance = (humanoidRootPart.Position - gunDrop.Position).Magnitude;
                    if distance < minDistance then
                        nearestGun = gunDrop;
                        minDistance = distance;
                    end
                end
                if nearestGun then
                    humanoidRootPart.CFrame = nearestGun.CFrame;
                    task.wait(0.3);
                    local prompt = nearestGun:FindFirstChildOfClass("ProximityPrompt");
                    if prompt then
                        fireproximityprompt(prompt);
                        task.wait(1);
                    end
                end
            end
        end
        task.wait(GunSystem.GunDropCheckInterval);
    end
end

local function GrabAndShootMurderer()
    if not (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Gun")) then
        if not GrabGun() then
            Library:Notify({
                Title = "Gun System",
                Description = "Failed to get gun!",
                Time = 3
            });
            return;
        end
        task.wait(0.1);
    end
    
    local roles = ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer();
    local murderer = nil;
    for name, data in pairs(roles) do
        if data.Role == "Murderer" then
            murderer = Players:FindFirstChild(name);
            break;
        end
    end
    
    if not murderer or not murderer.Character then
        Library:Notify({
            Title = "Gun System",
            Description = "Murderer not found!",
            Time = 3
        });
        return;
    end
    
    local targetRoot = murderer.Character:FindFirstChild("HumanoidRootPart");
    local localRoot = LocalPlayer.Character:FindFirstChild("HumanoidRootPart");
    if (targetRoot and localRoot) then
        localRoot.CFrame = targetRoot.CFrame * CFrame.new(0, 0, -4);
        task.wait(0.1);
    end
    
    local gun = LocalPlayer.Character:FindFirstChild("Gun");
    if not gun then
        Library:Notify({
            Title = "Gun System",
            Description = "Gun not equipped!",
            Time = 3
        });
        return;
    end
    
    local targetPart = murderer.Character:FindFirstChild("HumanoidRootPart");
    if not targetPart then return; end
    
    local args = {
        [1] = 1,
        [2] = targetPart.Position,
        [3] = "AH2"
    };
    
    if gun:FindFirstChild("KnifeLocal") and gun.KnifeLocal:FindFirstChild("CreateBeam") then
        gun.KnifeLocal.CreateBeam.RemoteFunction:InvokeServer(unpack(args));
        Library:Notify({
            Title = "Gun System",
            Description = "Successfully shot the murderer!",
            Time = 3
        });
    end
end

local InnocentGroup = Tabs.Innocent:AddLeftGroupbox("Gun System", "circle")

InnocentGroup:AddToggle("NotifyGunDrop", {
    Text = "Notify GunDrop",
    Default = true,
    Tooltip = "Get notified when guns are available",
    Callback = function(Value)
        GunSystem.NotifyGunDrop = Value
    end
})

InnocentGroup:AddButton({
    Text = "Grab Gun",
    Func = function()
        GrabGun()
    end
})

InnocentGroup:AddToggle("AutoGrabGun", {
    Text = "Auto Grab Gun",
    Default = false,
    Tooltip = "Automatically grab guns",
    Callback = function(Value)
        GunSystem.AutoGrabEnabled = Value
        if Value then
            coroutine.wrap(AutoGrabGun)()
            Library:Notify({
                Title = "Gun System",
                Description = "Auto Grab Gun enabled!",
                Time = 3
            })
        else
            Library:Notify({
                Title = "Gun System",
                Description = "Auto Grab Gun disabled",
                Time = 3
            })
        end
    end
})

InnocentGroup:AddButton({
    Text = "Grab Gun & Shoot Murderer",
    Func = function()
        GrabAndShootMurderer()
    end
})

-- Murder Tab Content
local killActive = false
local attackDelay = 0.5
local targetRoles = {"Sheriff", "Hero", "Innocent"}

local function getPlayerRole(player)
    local roles = ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer();
    if roles and roles[player.Name] then
        return roles[player.Name].Role;
    end
    return nil;
end

local function equipKnife()
    local character = LocalPlayer.Character;
    if not character then return false; end
    
    if character:FindFirstChild("Knife") then
        return true;
    end
    
    local knife = LocalPlayer.Backpack:FindFirstChild("Knife");
    if knife then
        knife.Parent = character;
        return true;
    end
    return false;
end

local function getNearestTarget()
    local targets = {};

    local roles = ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer();
    local localRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart");
    if not localRoot then return nil; end
    
    for _, player in ipairs(Players:GetPlayers()) do
        if (player ~= LocalPlayer) and player.Character then
            local role = getPlayerRole(player);
            local humanoid = player.Character:FindFirstChild("Humanoid");
            local targetRoot = player.Character:FindFirstChild("HumanoidRootPart");
            if (role and humanoid and humanoid.Health > 0 and targetRoot and table.find(targetRoles, role)) then
                table.insert(targets, {
                    Player = player,
                    Distance = (localRoot.Position - targetRoot.Position).Magnitude
                });
            end
        end
    end
    
    table.sort(targets, function(a, b)
        return a.Distance < b.Distance;
    end);
    
    return (targets[1] and targets[1].Player) or nil;
end

local function attackTarget(target)
    if not target or not target.Character then return false; end
    
    local humanoid = target.Character:FindFirstChild("Humanoid");
    if not humanoid or humanoid.Health <= 0 then return false; end
    
    if not equipKnife() then
        Library:Notify({
            Title = "Kill Targets",
            Description = "No knife found!",
            Time = 2
        });
        return false;
    end
    
    local targetRoot = target.Character:FindFirstChild("HumanoidRootPart");
    local localRoot = LocalPlayer.Character:FindFirstChild("HumanoidRootPart");
    if (targetRoot and localRoot) then
        localRoot.CFrame = CFrame.new(targetRoot.Position + ((localRoot.Position - targetRoot.Position).Unit * 2), targetRoot.Position);
    end
    
    local knife = LocalPlayer.Character:FindFirstChild("Knife");
    if (knife and knife:FindFirstChild("Stab")) then
        for i = 1, 3 do
            knife.Stab:FireServer("Down");
        end
        return true;
    end
    return false;
end

local function killTargets()
    if killActive then return; end
    killActive = true;
    
    Library:Notify({
        Title = "Kill Targets",
        Description = "Starting attack on nearest targets...",
        Time = 2
    });
    
    local function attackSequence()
        while killActive do
            local target = getNearestTarget();
            if not target then
                Library:Notify({
                    Title = "Kill Targets",
                    Description = "No valid targets found!",
                    Time = 3
                });
                killActive = false;
                break;
            end
            
            if attackTarget(target) then
                Library:Notify({
                    Title = "Kill Targets",
                    Description = "Attacked " .. target.Name,
                    Time = 1
                });
            end
            task.wait(attackDelay);
        end
    end
    
    task.spawn(attackSequence);
end

local function stopKilling()
    killActive = false;
    Library:Notify({
        Title = "Kill Targets",
        Description = "Attack sequence stopped",
        Time = 2
    });
end

local MurderGroup = Tabs.Murder:AddLeftGroupbox("Kill Functions", "circle")

MurderGroup:AddToggle("KillAll", {
    Text = "Kill All",
    Default = false,
    Tooltip = "Automatically kill all targets",
    Callback = function(Value)
        if Value then
            killTargets()
        else
            stopKilling()
        end
    end
})

MurderGroup:AddSlider("AttackDelay", {
    Text = "Attack Delay",
    Default = 0.5,
    Min = 0.1,
    Max = 2,
    Rounding = 1,
    Suffix = "s",
    Tooltip = "Delay between attacks",
    Callback = function(Value)
        attackDelay = Value
        Library:Notify({
            Title = "Kill Targets",
            Description = "Delay set to " .. Value .. "s",
            Time = 2
        })
    end
})

MurderGroup:AddButton({
    Text = "Equip Knife",
    Func = function()
        if equipKnife() then
            Library:Notify({
                Title = "Knife",
                Description = "Knife equipped!",
                Time = 2
            })
        else
            Library:Notify({
                Title = "Knife",
                Description = "No knife found!",
                Time = 2
            })
        end
    end
})

-- Sheriff Tab Content
local shotType = "Default"

local function ShootMurderer()
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("Humanoid") or LocalPlayer.Character.Humanoid.Health <= 0 then
        return;
    end
    
    local success, roles = pcall(function()
        return ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer();
    end);
    
    if not success or not roles then return; end
    
    local murderer = nil;
    for name, data in pairs(roles) do
        if data.Role == "Murderer" then
            murderer = Players:FindFirstChild(name);
            break;
        end
    end
    
    if not murderer or not murderer.Character or not murderer.Character:FindFirstChild("Humanoid") or murderer.Character.Humanoid.Health <= 0 then
        return;
    end
    
    local gun = LocalPlayer.Character:FindFirstChild("Gun") or LocalPlayer.Backpack:FindFirstChild("Gun");
    if (shotType == "Default") and not gun then return; end
    
    if gun and not LocalPlayer.Character:FindFirstChild("Gun") then
        gun.Parent = LocalPlayer.Character;
    end
    
    if (shotType == "Teleport") then
        local targetRoot = murderer.Character:FindFirstChild("HumanoidRootPart");
        local localRoot = LocalPlayer.Character:FindFirstChild("HumanoidRootPart");
        if (targetRoot and localRoot) then
            localRoot.CFrame = targetRoot.CFrame * CFrame.new(0, 0, -4);
        end
    end
    
    if gun and not LocalPlayer.Character:FindFirstChild("Gun") then
        gun.Parent = LocalPlayer.Character;
    end
    
    gun = LocalPlayer.Character:FindFirstChild("Gun");
    if (gun and gun:FindFirstChild("KnifeLocal")) then
        local targetPart = murderer.Character:FindFirstChild("HumanoidRootPart");
        if targetPart then
            local args = {
                [1] = 1,
                [2] = targetPart.Position,
                [3] = "AH2"
            };
            gun.KnifeLocal.CreateBeam.RemoteFunction:InvokeServer(unpack(args));
        end
    end
end

local SheriffGroup = Tabs.Sheriff:AddLeftGroupbox("Shot Functions", "circle")

SheriffGroup:AddDropdown("ShotType", {
    Values = {"Default", "Teleport"},
    Default = "Default",
    Text = "Shot Type",
    Tooltip = "Choose shot type",
    Callback = function(Value)
        shotType = Value
        Library:Notify({
            Title = "Sheriff System",
            Description = "Shot Type: " .. Value,
            Time = 3
        })
    end
})

SheriffGroup:AddButton({
    Text = "Shoot Murderer",
    Func = function()
        ShootMurderer()
    end
})

-- Information Tab Content
local InfoGroup = Tabs.Info:AddLeftGroupbox("Script Information", "info")
InfoGroup:AddLabel("Latte MM2 Hub", true)
InfoGroup:AddLabel("This is a merged version combining the best features from Latte Hub, providing a comprehensive MM2 experience.", true)
InfoGroup:AddLabel("Features Included", true)
InfoGroup:AddLabel("• Player ESP with multiple options\n• Character customization (walkspeed, jumppower)\n• Teleport system\n• Weapon spawner with multiple methods\n• Weapon duplication system\n• Visual weapon changer\n• Trade scam protection\n• Server lagger\n• Anti-stealer protection\n• Anti AFK system\n• Role-specific functions (Innocent, Sheriff, Murder)\n• And much more!", true)

local DiscordGroup = Tabs.Info:AddRightGroupbox("Discord Community", "info")
DiscordGroup:AddLabel("Join Our Discord", true)
DiscordGroup:AddLabel("Join our Discord server for updates, support, and to connect with other users!", true)
DiscordGroup:AddButton({
    Text = "Copy Discord Invite",
    Func = function()
        setclipboard("https://discord.gg/pU8r42d6hd")
        Library:Notify({
            Title = "Discord Invite",
            Description = "Discord invite copied to clipboard!",
            Time = 3
        })
    end
})

-- Socials Tab Content
local SocialsGroup = Tabs.Socials:AddLeftGroupbox("Latte Scripts", "star")
SocialsGroup:AddLabel("My socials", true)
SocialsGroup:AddButton({
    Text = "Youtube Channel",
    Func = function()
        if pcall(setclipboard, "https://www.youtube.com/@LatteHub") then
            Library:Notify({
                Title = "Follow for a cookie!",
                Description = "Youtube channel copied to clipboard.",
                Time = 3
            })
        else
            Library:Notify({
                Title = "Copy Error",
                Description = "Could not copy link to clipboard.",
                Time = 5
            })
        end
    end
})

local SocialsGroup2 = Tabs.Socials:AddRightGroupbox("Latte Hub", "star")
SocialsGroup2:AddButton({
    Text = "Tiktok Profile",
    Func = function()
        if pcall(setclipboard, "http://tiktok.com/@scriptsbylatte/") then
            Library:Notify({
                Title = "Follow for a cookie!",
                Description = "Tiktok profile has been copied!",
                Time = 3
            })
        else
            Library:Notify({
                Title = "Copy Error",
                Description = "Could not copy link to clipboard.",
                Time = 5
            })
        end
    end
})

-- UI Settings Tab Content
local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu", "wrench")
MenuGroup:AddToggle("KeybindMenuOpen", {
    Default = Library.KeybindFrame.Visible,
    Text = "Open Keybind Menu",
    Callback = function(value)
        Library.KeybindFrame.Visible = value
    end
})

MenuGroup:AddToggle("ShowCustomCursor", {
    Text = "Custom Cursor",
    Default = true,
    Callback = function(Value)
        Library.ShowCustomCursor = Value
    end
})

MenuGroup:AddDropdown("NotificationSide", {
    Values = {"Left", "Right"},
    Default = "Right",
    Text = "Notification Side",
    Callback = function(Value)
        Library:SetNotifySide(Value)
    end
})

MenuGroup:AddDropdown("DPIDropdown", {
    Values = {"50%", "75%", "100%", "125%", "150%", "175%", "200%"},
    Default = "100%",
    Text = "DPI Scale",
    Callback = function(Value)
        Value = Value:gsub("%%", "")
        local DPI = tonumber(Value)
        Library:SetDPIScale(DPI)
    end
})

MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind")
    :AddKeyPicker("MenuKeybind", {
        Default = "RightShift",
        NoUI = true,
        Text = "Menu keybind"
    })

MenuGroup:AddButton("Unload", function()
    Library:Unload()
end)

Library.ToggleKeybind = Options.MenuKeybind

-- Advanced Features Implementation
local flyBodyVelocity = nil
local flyBodyPosition = nil

local function startFly()
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
    
    local rootPart = LocalPlayer.Character.HumanoidRootPart
    
    flyBodyVelocity = Instance.new("BodyVelocity")
    flyBodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
    flyBodyVelocity.Velocity = Vector3.new(0, 0, 0)
    flyBodyVelocity.Parent = rootPart
    
    flyBodyPosition = Instance.new("BodyPosition")
    flyBodyPosition.MaxForce = Vector3.new(4000, 4000, 4000)
    flyBodyPosition.Position = rootPart.Position
    flyBodyPosition.Parent = rootPart
end

local function stopFly()
    if flyBodyVelocity then
        flyBodyVelocity:Destroy()
        flyBodyVelocity = nil
    end
    if flyBodyPosition then
        flyBodyPosition:Destroy()
        flyBodyPosition = nil
    end
end

-- Fly Controls
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed or not flyEnabled then return end
    
    local rootPart = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not rootPart or not flyBodyVelocity then return end
    
    local camera = workspace.CurrentCamera
    local moveVector = Vector3.new(0, 0, 0)
    
    if input.KeyCode == Enum.KeyCode.W then
        moveVector = moveVector + camera.CFrame.LookVector
    elseif input.KeyCode == Enum.KeyCode.S then
        moveVector = moveVector - camera.CFrame.LookVector
    elseif input.KeyCode == Enum.KeyCode.A then
        moveVector = moveVector - camera.CFrame.RightVector
    elseif input.KeyCode == Enum.KeyCode.D then
        moveVector = moveVector + camera.CFrame.RightVector
    elseif input.KeyCode == Enum.KeyCode.Space then
        moveVector = moveVector + Vector3.new(0, 1, 0)
    elseif input.KeyCode == Enum.KeyCode.LeftShift then
        moveVector = moveVector - Vector3.new(0, 1, 0)
    end
    
    flyBodyVelocity.Velocity = moveVector * flySpeed
end)

-- Noclip System
local function noclipLoop()
    if noclipEnabled and LocalPlayer.Character then
        for _, part in pairs(LocalPlayer.Character:GetChildren()) do
            if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                part.CanCollide = false
            end
        end
    end
end

-- Rainbow Character
local function rainbowCharacterLoop()
    if rainbowCharacter and LocalPlayer.Character then
        local hue = tick() % 10 / 10
        local color = Color3.fromHSV(hue, 1, 1)
        
        for _, part in pairs(LocalPlayer.Character:GetChildren()) do
            if part:IsA("BasePart") and part:FindFirstChild("Color") then
                part.Color = color
            end
        end
    end
end

-- Auto Collect System
local function autoCollectLoop()
    if not autoFarmEnabled then return end
    
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    
    local rootPart = character.HumanoidRootPart
    
    -- Auto collect coins
    if autoCollectCoins then
        for _, obj in pairs(workspace:GetChildren()) do
            if obj.Name == "Coin" and obj:IsA("BasePart") then
                local distance = (rootPart.Position - obj.Position).Magnitude
                if distance < 50 then
                    rootPart.CFrame = obj.CFrame
                    task.wait(0.1)
                end
            end
        end
    end
    
    -- Auto collect guns
    if autoCollectGuns then
        for _, obj in pairs(workspace:GetChildren()) do
            if obj.Name == "GunDrop" and obj:IsA("BasePart") then
                local distance = (rootPart.Position - obj.Position).Magnitude
                if distance < 50 then
                    rootPart.CFrame = obj.CFrame
                    task.wait(0.1)
                end
            end
        end
    end
end

-- Screen Shake Effect
local function screenShakeLoop()
    if screenShake and workspace.CurrentCamera then
        local camera = workspace.CurrentCamera
        local shake = math.sin(tick() * 20) * 2
        camera.CFrame = camera.CFrame * CFrame.new(shake, shake, 0)
    end
end

-- Enhanced ESP with new features
local function updateAdvancedESP()
    if not advancedESPEnabled then return end
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local character = player.Character
            local humanoid = character:FindFirstChild("Humanoid")
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            
            if humanoid and rootPart then
                local highlight = character:FindFirstChild("AdvancedHighlight")
                if not highlight then
                    highlight = Instance.new("Highlight")
                    highlight.Name = "AdvancedHighlight"
                    highlight.FillTransparency = 0.3
                    highlight.OutlineTransparency = 0
                    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                    highlight.Adornee = character
                    highlight.Parent = character
                end
                
                -- Rainbow ESP
                if rainbowESPEnabled then
                    local hue = (tick() + player.UserId) % 10 / 10
                    highlight.FillColor = Color3.fromHSV(hue, 1, 1)
                    highlight.OutlineColor = Color3.fromHSV(hue, 1, 1)
                else
                    local role = getRole(player)
                    local color = role == "Murderer" and Color3.new(1, 0, 0) or 
                                 role == "Sheriff" and Color3.new(0, 0, 1) or 
                                 Color3.new(0, 1, 0)
                    highlight.FillColor = color
                    highlight.OutlineColor = color
                end
                
                -- Distance ESP
                if distanceESPEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local distance = (LocalPlayer.Character.HumanoidRootPart.Position - rootPart.Position).Magnitude
                    local billboard = character:FindFirstChild("DistanceBillboard")
                    if not billboard then
                        billboard = Instance.new("BillboardGui")
                        billboard.Name = "DistanceBillboard"
                        billboard.Size = UDim2.new(0, 100, 0, 50)
                        billboard.StudsOffset = Vector3.new(0, 3, 0)
                        billboard.Parent = character
                        
                        local label = Instance.new("TextLabel")
                        label.Size = UDim2.new(1, 0, 1, 0)
                        label.BackgroundTransparency = 1
                        label.TextColor3 = Color3.new(1, 1, 1)
                        label.TextStrokeTransparency = 0
                        label.TextScaled = true
                        label.Font = Enum.Font.GothamBold
                        label.Parent = billboard
                    end
                    
                    local label = billboard:FindFirstChild("TextLabel")
                    if label then
                        label.Text = math.floor(distance) .. " studs"
                    end
                end
                
                -- Health ESP
                if healthESPEnabled then
                    local healthBillboard = character:FindFirstChild("HealthBillboard")
                    if not healthBillboard then
                        healthBillboard = Instance.new("BillboardGui")
                        healthBillboard.Name = "HealthBillboard"
                        healthBillboard.Size = UDim2.new(0, 100, 0, 30)
                        healthBillboard.StudsOffset = Vector3.new(0, 4, 0)
                        healthBillboard.Parent = character
                        
                        local healthLabel = Instance.new("TextLabel")
                        healthLabel.Size = UDim2.new(1, 0, 1, 0)
                        healthLabel.BackgroundTransparency = 1
                        healthLabel.TextColor3 = Color3.new(1, 1, 1)
                        healthLabel.TextStrokeTransparency = 0
                        healthLabel.TextScaled = true
                        healthLabel.Font = Enum.Font.GothamBold
                        healthLabel.Parent = healthBillboard
                    end
                    
                    local healthLabel = healthBillboard:FindFirstChild("TextLabel")
                    if healthLabel then
                        healthLabel.Text = math.floor(humanoid.Health) .. "/" .. math.floor(humanoid.MaxHealth)
                        healthLabel.TextColor3 = humanoid.Health > humanoid.MaxHealth * 0.5 and Color3.new(0, 1, 0) or Color3.new(1, 0, 0)
                    end
                end
            end
        end
    end
end

-- Main Loop
RunService.Heartbeat:Connect(function()
    -- Fly system
    if flyEnabled then
        if not flyBodyVelocity then
            startFly()
        end
    else
        if flyBodyVelocity then
            stopFly()
        end
    end
    
    -- Noclip
    noclipLoop()
    
    -- Rainbow character
    rainbowCharacterLoop()
    
    -- Auto collect
    autoCollectLoop()
    
    -- Screen shake
    screenShakeLoop()
    
    -- Update character settings
    updateCharacter()
end)

-- Connect ESP updates
RunService.RenderStepped:Connect(function()
    if not lineESPEnabled then return end
    for player, line in pairs(tracers) do
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = player.Character.HumanoidRootPart
            local screenPos, onScreen = workspace.CurrentCamera:WorldToViewportPoint(hrp.Position)
            local rootGuiSize = workspace.CurrentCamera.ViewportSize
            if onScreen then
                line.From = Vector2.new(rootGuiSize.X / 2, rootGuiSize.Y)
                line.To = Vector2.new(screenPos.X, screenPos.Y)
                line.Visible = true
            else
                line.Visible = false
            end
        else
            line.Visible = false
        end
    end
end)

-- Connect advanced ESP updates
RunService.Heartbeat:Connect(updateAdvancedESP)

-- Monitor player changes for ESP
local function monitorPlayer(player)
    player.CharacterAdded:Connect(function()
        local backpack = player:WaitForChild("Backpack")
        backpack.ChildAdded:Connect(updateESP)
        backpack.ChildRemoved:Connect(updateESP)
        updateESP()
    end)

    if player.Character then
        local backpack = player:FindFirstChild("Backpack")
        if backpack then
            backpack.ChildAdded:Connect(updateESP)
            backpack.ChildRemoved:Connect(updateESP)
        end
    end
end

for _, player in ipairs(Players:GetPlayers()) do monitorPlayer(player) end
Players.PlayerAdded:Connect(monitorPlayer)

-- Player removal handling
Players.PlayerRemoving:Connect(function(player)
    if player == LocalPlayer then
        for _, line in pairs(tracers) do
            if line then line:Remove() end
        end
        tracers = {}
    end
end)

-- Initialize gun system
task.spawn(function()
    if not LocalPlayer.Character then
        LocalPlayer.CharacterAdded:Wait();
    end
    ScanForGunDrops();
    if GunSystem.AutoGrabEnabled then
        coroutine.wrap(AutoGrabGun)();
    end
end);

-- Initialize ESP
updateESP()

-- Addons setup
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

ThemeManager:SetFolder("LatteMM2Hub")
SaveManager:SetFolder("LatteMM2Hub/MM2")

SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])

SaveManager:LoadAutoloadConfig()

Library:OnUnload(function()
    print("Latte MM2 Hub Unloaded!")
end)

Library:Notify({
    Title = "Enhanced MM2 Hub",
    Description = "Script loaded successfully! All features including new advanced functions are now available.",
    Time = 5
})
